<resources>
    <string name="app_name">My Application</string>
    <string name="title_activity_home">Home</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_share">Share</string>
    <string name="menu_send">Send</string>
    <string name="title_activity_lecture">Lecture</string>
    <string name="title_activity_assessment_task">AssessmentTask</string>


    <string name="midtermtwo"><![CDATA[<p>Exception handling is the process of responding to exceptions when a computer
    program runs. An exception occurs when an unexpected event happens that requires special
    processing.</p><br>

    <p>Exception handling attempts to gracefully handle these situations so that a program does
    not crash. Exception handling can be performed at both the software and hardware levels.</p><br>

    <b>Hierarchy of Java Exception classes</b><br><br>


    <p>The java.lang.Throwable class is the root class of Java Exception hierarchy which is inherited by
    two subclasses: Exception and Error</p>
    ]]></string>

    <string name="midtermtwo_midtermtryandcatch"><![CDATA[<p>•The <b>try</b> statement allows you to define a block of code to be tested for errors while it is
    being executed.</p><br>

    <p>•The <b>catch</b> statement allows you to define a block of code to be executed, if an error
    occurs in the try block..</p><br>

    <p>•The <b>throw</b> statement allows you to create a custom error.</p><br>

    <b>Types of Java Exceptions</b> <br>

    <p>There are mainly two types of exceptions: checked and unchecked. Here, an error is considered
    as the unchecked exception. According to Oracle, there are three types of exceptions: </p> <br>

    <p>1. Checked Exception <br>

    •The classes which directly inherit Throwable class except RuntimeException and
    Error are known as checked exceptions. Checked exceptions are checked at compile-
    time. <br>

    2. Unchecked Exception <br>

    •The classes which inherit RuntimeException are known as unchecked exceptions.
    Unchecked exceptions are not checked at compile-time, but they are checked at
    runtime. <br>

    2. Error <br>

    •Error is irrecoverable <br>

    </p>

    ]]></string>

    <string name="midtermtwo_userdefinedexception"><![CDATA[<p>•User Defined Exception or custom exception is creating your own exception class and
    throws that exception using ‘throw’ keyword. This can be done by extending the class
    Exception.</p><br>

    <p>•There is no need to override any of the above methods available in the Exception class,
    in your derived class.  But practically, you will require some amount of customizing as
    per your programming needs.</p><br>

    ]]></string>

    <string name="midtermtwo_assertions"><![CDATA[<p>•An assertion is a statement in Java which ensures the correctness of any assumptions
    which have been done in the program. When an assertion is executed, it is assumed to
    be true. If the assertion is false, the JVM will throw an Assertion error. It finds it
    application primarily in the testing purposes. Assertion statements are used along with
    boolean expressions.</p><br>

    <p>•Assertions in Java can be done with the help of the assert keyword. There are two ways
    in which an assert statement can be used.</p><br>

    <b>Advantage of Assertion</b> <br>
    <p>- It provides an effective way to detect and correct programming errors.</p> <br>

    <b>Syntax of using Assertion:</b> <br>
    <p>There are two ways to use assertion. <br>
    1. assert expression; <br>
    2. assert expression1 : expression2;
    </p>

    ]]></string>

    <string name="midtermone"><![CDATA[<p>When an escape sequence is encountered in a print statement, the compiler interprets it accordingly. For
    example, if you want to put quotes within quotes you must use the escape sequence, \&quot;, on the interior
    quotes. To print the sentence.</p><br>

    &emsp She said &quot;Hello!&quot; to me.<br>
    you would write <br>
    &emsp System.out.println(&quot;She said \&quot;Hello!\&quot; to me.&quot;);<br><br>


    <p>
    Java provides three classes to represent a sequence of characters: <b>String, StringBuffer </b>, and
    <b>StringBuilder</b>. The String class is an immutable class whereas StringBuffer and StringBuilder classes are
    mutable. There are many differences between StringBuffer and StringBuilder. The StringBuilder class is
    introduced since JDK (Java Development Kit) 1.5. <br> <br>

    <b>String</b> is basically an object that represents sequence of char values. String works the same as n array of
    characters. For example: <br> <br>

    &emsp char[] ch = {&#39;j&#39;,&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;t&#39;,&#39;p&#39;,&#39;o&#39;,&#39;i&#39;,&#39;n&#39;,&#39;t&#39;}; <br>
    &emsp String s = new String(ch); <br>

    Is the same as:<br>

    &emsp String s = &quot;javatpoint&quot;; <br> <br>

    <b>String</b> class provides a lot of methods to perform operations on string such as compare(), concat(),
    equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. <br>
    The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. <br>
    </p>

    ]]></string>

    <string name="midtermthree"><![CDATA[Two different ways to create an array. <br>
    1. <b>Array</b>: Simple fixed sized arrays that we create in Java <br>
    &emsp int arr [] = new int [10] <br> <br>

    2. <b>ArrayList</b> : Dynamic sized arrays in Java that implement List interface. <br>
    &emsp ArrayList&lt;Type&gt; arrL = new ArrayList &lt;Type&gt; (); <br>
    &emsp Here Type is the type of elements in ArrayList to be created <br> <br>


    <b>Differences between Array and ArrayList</b> <br>
    <p>•An array is a basic functionality provided by Java. ArrayList is part of collection
    framework in Java. Array members are accessed using [], while ArrayList has a set of
    methods to access elements and modify them.</p><br> <br>

    <p>•Array is a fixed size data structure while ArrayList is not. One need not to mention the size
    of Arraylist while creating its object. Even if we specify some initial capacity, we can add
    more elements.</p><br> <br>

    <p>•Array can contain both primitive data types as well as objects of a class depending on the
    definition of the array. However, ArrayList only supports object entries, not the primitive
    data types.</p><br> <br>

    <p>•ArrayList can’t be created for primitive data types, members of ArrayList are always
    references to objects at different memory locations. In ArrayList, the actual objects are
    never stored at contiguous locations. References of the actual objects are stored at
    contiguous locations. In array, it depends whether the arrays is of primitive type or object
    type. In case of primitive types, actual values are contiguous locations, but in case of
    objects, allocation is similar to ArrayList.</p><br> <br>

    ]]></string>


</resources>
